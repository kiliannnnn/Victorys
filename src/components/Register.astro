---
import { isRegistered, createUser } from "@/data/pbUser";
import { Validators } from "@/utils/validators";

const passwordMinLength = import.meta.env.VCTR_PASSWORD_LENGTH;

const errors = { username: "", email: "", password: "" };
if (Astro.request.method === "POST") {
    try {
        const data = await Astro.request.formData();
        const name = data.get("username") as string | null;
        const email = data.get("email") as string | null;
        const password = data.get("password") as string | null;
        const passwordConfirm = data.get("passwordConfirm") as string | null;
        if (typeof name !== "string" || name.length < 1) {
            errors.username += "Please enter a username. ";
        } else if (await isRegistered("username", name)) {
            errors.email += "Username is already registered. ";
        } else if (await isRegistered("name", name)) {
            errors.email += "Name is already registered. ";
        }
        if (typeof email !== "string" || !Validators.isEmail(email)) {
            errors.email += "Email is not valid. ";
        } else if (await isRegistered("email", email)) {
            errors.email += "Email is already registered. ";
        }
        if (typeof password !== "string" || !Validators.minLength(password, passwordMinLength)) {
            errors.password += "Password must be at least "+ passwordMinLength +" characters. ";
        }
        const hasErrors = Object.values(errors).some((msg) => msg);
        if (!hasErrors) {
            await createUser(name!, email!, password!, passwordConfirm!);
            return Astro.redirect("/login");
        }
    } catch (error) {
        if (error instanceof Error) {
            console.error(error.message);
        }
    }
}
---

<h1>Register</h1>
<form method="POST">
    <label>
        Username:
        <input type="text" name="username" />
    </label>
    {errors.username && <p>{errors.username}</p>}
    <label>
        Email:
        <input type="email" name="email" required />
    </label>
    {errors.email && <p>{errors.email}</p>}
    <label>
        Password:
        <input type="password" name="password" required minlength={passwordMinLength} />
    </label>
    <label>
        Password:
        <input type="password" name="passwordConfirm" required minlength={passwordMinLength} />
    </label>
    {errors.password && <p>{errors.password}</p>}
    <button>Register</button>
</form>
