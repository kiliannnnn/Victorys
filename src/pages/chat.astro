---
export const prerender = false;

import { supabase, supabaseAdmin } from "@/lib/supabase";
import Layout from "@/layouts/HTML.astro";

const accessToken = Astro.cookies.get("sb-access-token");
const refreshToken = Astro.cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
    return Astro.redirect("/signin");
}

let session;
try {
    session = await supabase.auth.setSession({
        refresh_token: refreshToken.value,
        access_token: accessToken.value,
    });
    if (session.error) {
        Astro.cookies.delete("sb-access-token", { path: "/" });
        Astro.cookies.delete("sb-refresh-token", { path: "/" });
        return Astro.redirect("/signin");
    }
} catch (error) {
    Astro.cookies.delete("sb-access-token", { path: "/" });
    Astro.cookies.delete("sb-refresh-token", { path: "/" });
    return Astro.redirect("/signin");
}

let chatMessages: any[] = [];

console.log(supabaseAdmin.listUsers());

---
<Layout title="Chat">
    <div class="bg-gray-100 dark:bg-gray-900 min-h-screen">
        <div class="container mx-auto py-8 px-4 lg:px-8">
            <div class="bg-white dark:bg-gray-800 shadow-md rounded-lg p-6 flex flex-col md:flex-row gap-6">
                <div class="w-full md:w-1/4 bg-gray-200 dark:bg-gray-700 rounded-lg p-4">
                    <h2 class="text-lg font-semibold text-gray-800 dark:text-gray-100 mb-4">Users</h2>
                    <ul class="space-y-3">
                        {users.map((user) => (
                            <li>
                                <button
                                    onclick={`selectUser('${user.id}')`}
                                    class="block w-full text-left px-4 py-2 text-gray-700 dark:text-gray-200 hover:bg-gray-300 dark:hover:bg-gray-600 rounded-lg"
                                >
                                    {user.email}
                                </button>
                            </li>
                        ))}
                    </ul>
                </div>

                <!-- Chat Area -->
                <div class="flex-1 bg-gray-100 dark:bg-gray-900 rounded-lg p-6 flex flex-col">
                    <div id="chat-header" class="mb-6">
                        <h2 class="text-xl font-bold text-gray-800 dark:text-gray-100" id="selected-user">
                            Select a user to chat
                        </h2>
                    </div>
                    <div id="chat-box" class="flex-1 overflow-y-auto space-y-4">
                        {chatMessages.map((message) => (
                            <div
                                class={`p-4 rounded-lg ${
                                    message.sender_id === currentUser.user.id
                                        ? "bg-blue-500 text-white self-end"
                                        : "bg-gray-300 dark:bg-gray-700 text-gray-800 dark:text-gray-100"
                                }`}
                            >
                                {message.message}
                            </div>
                        ))}
                    </div>
                    <form id="message-form" class="mt-6 flex" onsubmit="sendMessage(event)">
                        <input
                            type="text"
                            id="message-input"
                            placeholder="Type a message..."
                            class="flex-1 px-4 py-2 rounded-l-lg border border-gray-300 focus:ring focus:ring-blue-500 focus:outline-none"
                        />
                        <button
                            type="submit"
                            class="px-4 py-2 bg-blue-600 text-white rounded-r-lg hover:bg-blue-700"
                        >
                            Send
                        </button>
                    </form>
                </div>
            </div>
        </div>

        <script type="module">
            import { createClient } from "@supabase/supabase-js";

            const supabase = createClient("https://your-supabase-url", "your-supabase-anon-key");
            const chatBox = document.getElementById("chat-box");
            const selectedUserElement = document.getElementById("selected-user");
            const messageInput = document.getElementById("message-input");
            const currentUserId = "{currentUser.user.id}";

            let selectedUserId = null;

            async function selectUser(userId) {
                selectedUserId = userId;

                // Update header with the selected user's email
                const { data: user } = await supabase.from("users").select("email").eq("id", userId).single();
                selectedUserElement.textContent = `Chat with ${user.email}`;

                // Fetch messages between the current user and the selected user
                const { data: messages } = await supabase
                    .from("messages")
                    .select("sender_id, recipient_id, message")
                    .or(`sender_id.eq.${currentUserId},recipient_id.eq.${currentUserId}`)
                    .or(`sender_id.eq.${userId},recipient_id.eq.${userId}`);

                chatBox.innerHTML = ""; // Clear chat box
                messages.forEach((message) => {
                    const messageDiv = document.createElement("div");
                    messageDiv.textContent = message.message;
                    messageDiv.className = `p-4 rounded-lg ${
                        message.sender_id === currentUserId
                            ? "bg-blue-500 text-white self-end"
                            : "bg-gray-300 dark:bg-gray-700 text-gray-800 dark:text-gray-100"
                    }`;
                    chatBox.appendChild(messageDiv);
                });
            }

            async function sendMessage(event) {
                event.preventDefault();

                const messageText = messageInput.value.trim();
                if (!messageText || !selectedUserId) return;

                // Insert the new message into the database
                await supabase.from("messages").insert({
                    sender_id: currentUserId,
                    recipient_id: selectedUserId,
                    message: messageText,
                });

                // Display the message in the chat box
                const messageDiv = document.createElement("div");
                messageDiv.textContent = messageText;
                messageDiv.className = "p-4 rounded-lg bg-blue-500 text-white self-end";
                chatBox.appendChild(messageDiv);

                messageInput.value = ""; // Clear input field
                chatBox.scrollTop = chatBox.scrollHeight; // Scroll to the bottom
            }
        </script>
    </div>
</Layout>
